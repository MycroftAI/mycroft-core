#!/bin/bash

# Copyright 2016 Mycroft AI, Inc.
#
# This file is part of Mycroft Core.
#
# Mycroft Core is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Mycroft Core is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Mycroft Core.  If not, see <http://www.gnu.org/licenses/>.


# @author Augusto Monteiro
#
# This script assists in the installation and management of
# skills loaded from Github.  

mycroft_skill_folder=${mycroft_skill_folder:-"/opt/mycroft/skills"}
if [[ ! -d "${mycroft_skill_folder}" ]] ; then
    echo "Uname to access ${mycroft_skill_folder}!"
    exit 101
fi 

# picroft?
if [[ "$(hostname)" == 'picroft' ]] || [[ -x /home/pi/bin/cli ]] ; then
    picroft=0
else
    picroft=1
    if locate virtualenvwrapper.sh ; then
        source $(locate virtualenvwrapper.sh)
    else
        echo "Unable to locate virtualenvwrapper.sh, will not be able to install skills!"
    fi
fi

default_skills="alarm audio-record configuration date-time desktop-launcher ip joke hello-world media npr-news naptime pairing personal reminder installer singing speak spelling stop stock volume weather wiki wolfram-alpha mark1-demo"

echo "#######  Mycroft Skill Manager #######"

function help() {
    echo "msm: Mycroft Skill Manager"
    echo -e "     Copyright (c) 2017 Mycroft AI, Inc.  All rights reserved.\n"
    echo "usage: msm install <repository> or <name>"
    echo "     Installs the given Skill into the ${mycroft_skill_folder}"
    echo "     where <repository> is the address of the skill in Github."
    echo "example: msm search rss-skill"
    echo -e "example: msm install https://github.com/ethanaward/demo_skill.git\n"
    exit 1
}

function list() {
if hash curl ; then
    if ! curl -s "https://raw.githubusercontent.com/MycroftAI/mycroft-skills/master/.gitmodules" ; then
            echo "Unable to pull master skills list!"
            exit 111    
    fi
else 
    if ! wget -qO- "https://raw.githubusercontent.com/MycroftAI/mycroft-skills/master/.gitmodules" ; then
            echo "Unable to pull master skills list!"
            exit 112
    fi
fi
}

function install() {
cd "${mycroft_skill_folder}"
# loop through list of arguments
while [[ $# -gt 0 ]] ; do
    iskill="${1}";
    shift;
    echo "Attempting to install ${iskill}..."
    if [[ "${iskill}" == "git@"* || "${iskill}" == "https://"* || "${iskill}" == "http://"* ]]; then
        repo="${iskill}"
    else
        skill_list=$(list)
        skills=$(echo "$skill_list" | grep -n 'submodule' | sed 's/[[:space:]]//g' | sed 's/\[submodule"//g' | sed 's/"\]//g')
        exact_match=$(echo "$skills" | grep -i ".*:${iskill}$")
        skill=$(echo "$skills" | grep -i ".*:.*${iskill}.*")
        if [[ ! -z "${exact_match}" ]]; then
            skill=${exact_match}
        fi
        git_line=$(echo "$skill" | sed 's/\:.*//')
    
        if [[ "${skill}" ==  *$'\n'* ]]; then
            echo -e "Your search has multiple choices\n\n$skill" | sed 's/.*://g'
            return 3
        else
            if [[ -z "${git_line}" ]]; then
                echo "Skill not found"
                return 3
            fi
        repo_line=$(($git_line + 2))
        repo=$(echo "$skill_list" | sed -n $repo_line'{p;q;}' | sed 's/[[:space:]]//g' | sed 's/url=//g')
        fi 
    fi
    git_name=$(echo "${repo}" | sed 's/.*\///')
    name=$(echo "$git_name" | sed 's/.git//')
    echo "Cloning repository"
    git clone "${repo}" >> /dev/null
    if ! cd "${name}" ; then
        echo "Unable to access directory ${name}!"
        return 102
    fi
    if [[ -f "requirements.txt" ]]; then
        echo "Installing libraries requirements"
        if [[ $picroft -eq 1 ]]; then
            if workon mycroft ; then
                if ! pip install -r requirements.txt ; then
                    echo "Unable to install requirements for skill ${iskill}!"
                    deactivate
                    return 121
                fi
            else
                echo "Unable to activate mycroft virtualenv!"
                deactivate
                return 120
            fi
        else 
            if ! pip install -r requirements.txt ; then
                echo "Unable to install requirements for skill ${iskill}!"
                return 121
            fi
        fi
        
    fi 
    echo "Skill ${iskill} has been installed!"
done

}

function update() {
cd "${mycroft_skill_folder}"
for d in $(find "${mycroft_skill_folder}" -mindepth 1 -maxdepth 1 -type d |grep -v '.git'$ ); do
    if git -C "$d" rev-parse --git-dir > /dev/null 2>&1; then
        cd "${d}" 
        if [[ -z $(git status --porcelain) ]]; then
        git fetch
        git reset --hard origin/master 
    fi
fi
done
}

function search() {
skill_list=$(list)
search_list=$(echo "$skill_list" | grep 'submodule "' | sed 's/\[submodule "//g'| sed 's/"\]//g')
while [[ $# -gt 0 ]] ; do
    search_string=$1
    shift
    while read -r matches; do
        if [[ "${search_string}" == "${matches}" ]] ; then
            echo "Exact match found: ${matches}"
        else
            echo "Possible match: ${matches}"
        fi
    done < <(grep -i "${search_string}" <<< "${search_list}") 
done
}
    

#### Main

OPT=$1
shift
case ${OPT} in
    "install") if [[ $# -gt 0 ]] ; then install "$*" ; else  help ; fi;;
    "list") list | grep 'submodule "' | sed 's/\[submodule "//g'| sed 's/"\]//g' ;;
    "update") update ;;
    "default") install $(echo ${default_skills}) ;;
    "search")  if [[ $# -gt 0 ]] ; then search "$*" ; else  help ; fi;;
    *) help ;;
esac

if  [[ $? -gt 0 ]] ; then
    echo "Sorry I'm unable to complete the request! Check the error messages above for why."
fi
exit 0
