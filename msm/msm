#!/bin/bash

# Copyright 2016 Mycroft AI, Inc.
#
# This file is part of Mycroft Core.
#
# Mycroft Core is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Mycroft Core is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Mycroft Core.  If not, see <http://www.gnu.org/licenses/>.


# @author Augusto Monteiro
#
# This script assists in the installation and management of
# skills loaded from Github.


# These skills are automatically installed on all mycroft-core
# installations.
DEFAULT_SKILLS="skill-alarm skill-audio-record skill-configuration "\
"skill-date-time skill-desktop-launcher skill-ip skill-joke "\
"skill-hello-world skill-media skill-npr-news skill-naptime skill-pairing "\
"skill-personal skill-playback-control skill-reminder skill-installer "\
"skill-singing skill-speak skill-spelling skill-stop skill-stock "\
"skill-volume skill-weather skill-wiki fallback-wolfram-alpha "\
"fallback-aiml skill-mark1-demo "


mycroft_skill_folder=${mycroft_skill_folder:-"/opt/mycroft/skills"}
if [[ ! -d "${mycroft_skill_folder}" ]] ; then
    echo "ERROR: Unable to access ${mycroft_skill_folder}!"
    exit 101
fi


# picroft/mk1?
if [[ "$(hostname)" == 'picroft' ]] || [[ "$(hostname)" =~ "mark_1" ]] &&  [[ -x /usr/local/bin/mycroft-wifi-setup-client ]] ; then
  picroft='true'
else
  picroft='false'
  if [[ -r /etc/bash_completion.d/virtualenvwrapper ]]; then
    source /etc/bash_completion.d/virtualenvwrapper
  else
    if locate virtualenvwrapper ; then
      if ! source $(locate virtualenvwrapper) ; then
        echo "WARNING: Unable to locate virtualenvwrapper.sh, not able to install skills!"
        vwrap='false'
      fi
    fi
  fi
fi


function help() {
  echo "msm: Mycroft Skill Manager"
  echo "usage: msm [option] [repo | name]"
  echo
  echo "Options:"
  echo "  default           installs the default skills, updates all others"
  echo "  install <repo>    installs from the specified github repo"
  echo "  install <name>    installs the mycroft-skill matching <name>"
  echo "  list              list all mycroft-skills"
  echo "  update            update all installed skills"
  echo "  search [<name>]   search mycroft-skills for match for <name>"
  echo
  echo "Params:"
  echo "  <repo>   full URL to a Github repo"
  echo "  <name>   one or more substrings to match against submodule names"
  echo "           in the https://github.com/MycroftAI/mycroft-skills repo"
  echo
  echo "Examples:"
  echo "  msm search twitter"
  echo "  msm search date-time-skill"
  echo "  msm install daily meditation"
  echo "  msm install https://github.com/ethanaward/demo_skill.git"

  exit 1
}


LIST_CACHE=''  # only retrieve list once per MSM invocation
function list() {
  if ! [[ ${LIST_CACHE} ]] ; then
    if hash curl ; then
      LIST_CACHE=$( curl -s "https://raw.githubusercontent.com/MycroftAI/mycroft-skills/master/.gitmodules" )
      if ! [[ "${LIST_CACHE}" ]] ; then
        echo "ERROR:  Unable to retrieve master skills list!"
        exit 111
      fi
    else
      _LIST=$( wget -qO- "https://raw.githubusercontent.com/MycroftAI/mycroft-skills/master/.gitmodules" )
      if ! [[ "${LIST_CACHE}" ]] ; then
        echo "ERROR:  Unable to retrieve master skills list!"
        exit 112
      fi
    fi
  fi

  echo "${LIST_CACHE}"
}


function install() {
  cd "${mycroft_skill_folder}"
  if [[ "${vwrap}" == 'false' ]] ; then
      echo "ERROR:  Missing virtualwrapper, cowardly refusing to install skills."
      return 5
  fi

  # loop through arguments, treat each as a independent request
  while [[ $# -gt 0 ]] ; do
    cd "${mycroft_skill_folder}"

    iskill="${1}";
    shift;

    if [[ "${iskill}" == "git@"* || "${iskill}" == "https://"* || "${iskill}" == "http://"* ]]; then
      # Repo was given
      repo="${iskill}"
    else
      # Name was given, search for a match
      skills=$(list | grep -n 'submodule' | sed 's/[[:space:]]//g' | sed 's/\[submodule"//g' | sed 's/"\]//g')
      exact_match=$(echo "$skills" | grep -i ".*:${iskill}$")
      skill=$(echo "$skills" | grep -i ".*:.*${iskill}.*")
      if [[ ! -z "${exact_match}" ]]; then
        skill=${exact_match}
      fi
      git_line=$(echo "$skill" | sed 's/\:.*//')

      if [[ "${skill}" ==  *$'\n'* ]]; then
        # TODO: Installer skill was searching for this exact string
        #       and expects three lines as a header
        echo -e "Your search has multiple choices\n--------------------------------"
        echo "$skill" | sed 's/.*://g' | sort
        return 201
      else
        if [[ -z "${git_line}" ]]; then
          # TODO: Installer skill was searching for this exact string
          echo "A ${iskill} skill was not found"
          return 202
        fi
        repo_line=$(($git_line + 2))
        repo=$(list | sed -n $repo_line'{p;q;}' | sed 's/[[:space:]]//g' | sed 's/url=//g')
      fi
    fi

    git_name=$(echo "${repo}" | sed 's/.*\///')
    name=$(echo "$git_name" | sed 's/.git//')
    if [[ -d "${mycroft_skill_folder}/${name}" ]] ; then
      # Don't show message when verify default skills
      if [[ "${INSTALLING_DEFAULTS}" == "false" ]] ; then
         echo "Skill already installed.  Perhaps you meant to use update?"
      fi
      continue 169
    fi

    echo "Cloning repository..."
    git clone "${repo}" >> /dev/null
    if ! cd "${name}" ; then
      echo "ERROR: Unable to access directory ${name}!"
      return 102
    fi
    if [[ "${picroft}" == "true" ]] ; then
      if ! sudo chown -R mycroft:mycroft "${mycroft_skill_folder}/${name}" ; then
        echo "ERROR: Unable to chown install directory ${name}!"
        return 123
      fi
    fi
    if [[ -f "requirements.txt" ]]; then
      echo "Installing requirements..."
      if [[ "${picroft}" == 'false' ]]; then
        if [[ "${VIRTUAL_ENV}" =~ .mycroft$ ]] ; then
          if ! pip install -r requirements.txt ; then
            echo "ERROR: Unable to install requirements for skill ${iskill}!"
            return 121
          fi
        else
          if workon mycroft ; then
            if ! pip install -r requirements.txt ; then
              echo "ERROR: Unable to install requirements for skill ${iskill}!"
              deactivate mycroft
              return 121
            fi
          else
            echo "ERROR: Unable to activate mycroft virtualenv!"
            return 120
          fi
        fi
      else
        if ! sudo pip install -r requirements.txt ; then
          echo "ERROR: Unable to install requirements for skill ${iskill}!"
          return 121
        fi
      fi
    fi
    echo "The ${iskill} skill has been installed!"
    echo
  done
}


function update() {
  echo "=== Updating installed skills"
  cd "${mycroft_skill_folder}"
  for d in $(find "${mycroft_skill_folder}" -mindepth 1 -maxdepth 1 -type d |grep -v '.git'$ ); do
    if git -C "$d" rev-parse --git-dir > /dev/null 2>&1; then
      cd "${d}"
      UPSTREAM=${1:-'@{u}'}
      LOCAL=$(git rev-parse @)
      REMOTE=$(git rev-parse "$UPSTREAM")
      BASE=$(git merge-base @ "$UPSTREAM")

      if ! grep -q '.pyc'$ .git/info/exclude; then
        echo "*.pyc" >> .git/info/exclude
      fi

      # Check if the repo is dirty or has commits to push
      if [[ (-z $(git status --porcelain --untracked-files=no)) && !($LOCAL != $REMOTE && $REMOTE = $BASE) ]]; then
        echo "Updating ${d}..."
        echo -n "  "
        git fetch
        git reset --hard origin/master
        rm -f *.pyc
      else
        echo "Ignoring ${d}, skill has been modified."
      fi
    fi
  done
}


function search() {
  search_list=$(list | grep 'submodule "' | sed 's/\[submodule "//g'| sed 's/"\]//g')
  while [[ $# -gt 0 ]] ; do
    search_string=$1
    shift
    while read -r matches; do
      if [[ "${search_string}" == "${matches}" ]] ; then
        echo "Exact match found: ${matches}"
      else
        echo "Possible match: ${matches}"
      fi
    done < <(grep -i "${search_string}" <<< "${search_list}")
  done
}


######################################################################
## Main program
######################################################################

INSTALLING_DEFAULTS='false'
OPT=$1
shift
case ${OPT} in
  "install") if [[ $# -gt 0 ]] ; then install $(echo "$*") ; else  help ; fi;;
  "list")    list | grep 'submodule "' | sed 's/\[submodule "//g'| sed 's/"\]//g' | sort ;;
  "update")  update ;;
  "default") echo "=== Checking for default skills" ; INSTALLING_DEFAULTS='true' ; install $(echo ${DEFAULT_SKILLS}); update ;;
  "search")  if [[ $# -gt 0 ]] ; then search $(echo "$*") | sort ; else  help ; fi;;
  *)         help ;;
esac

exit_code=$?
if  [[ ${exit_code} -gt 0 ]] ; then
  echo "Failed to complete request.  Err=${exit_code}"
fi
exit ${exit_code}
